{"./":{"url":"./","title":"Introduction","keywords":"","body":"Poly Networkwe provide:Poly Network Poly Network is a global cross-chain interoperability protocol for implementing blockchain interoperability and building the Web3.0 infrastructure. Poly Network has also integrated over 15 blockchains, including Ethereum, Polygon, Avalanche, Fantom, BSC, Arbitrum, Optimism, Heco, OEC, Neo, Ontology, Zilliqa, Elrond, xDai, etc. Since the launch, the protocol has enabled more than USD 15 billion to cross-chain asset transfer, and its TVL surpasses USD 1 billion. Cross-chain asset transfer NFT cross-chain transfer Token Swap we provide: Protocol for joining the poly cross-chain ecosystem The poly cross-chain ecosystem provides a platform for various chains to interact and transfer data and conduct cross-chain transactions. Any chain can freely join the ecosystem. However, the chains that support smart contracts can interact and share all kinds of information between chains, while the chains that do not support smart contracts are limited to cross-chain asset transfer. Protocol for Integrating new cross-chain tokens Specification for implementing Cross-chain smart contracts Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-06 10:07:58 "},"add_chain/readme.html":{"url":"add_chain/readme.html","title":"Joining the Cross Chain Ecosystem","keywords":"","body":"How to Join the Cross-Chain EcosystemGeneral StepsHow to Join the Cross-Chain Ecosystem The poly cross-chain ecosystem provides a platform for various chains to interact and transfer data and conduct cross-chain transactions. Any chain can freely join the ecosystem. However, the chains that support smart contracts can interact and share all kinds of information between chains, while the chains that do not support smart contracts are limited to cross-chain asset transfer. General Steps Adding a new chain to poly involves three main phases: Implementation The smart contracts, chain registration interface method, block verification interface method, and relayer interface method. Deployment and Registration Operations such as smart contract deployment, side chain registration, and relayer setup. Proceeded only by the poly team following general specifications. Initialization and Running Perform specific actions like business contract call, cross-chain events handling based on the selected solution on poly nodes. This section is intended for developers who want to help add a new chain to the poly cross-chain ecosystem. Here is the outline that will be introduced: The introduction and development specification of Smart Contract The introduction and development specification of New chain registration The introduction and development specification of block data verification The introduction and development specification of relayer Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-18 15:52:24 "},"add_chain/contracts.html":{"url":"add_chain/contracts.html","title":"Cross-Chain Smart Contract","keywords":"","body":"Calling Cross Chain Manager ContratIntroductionInterfacesExampleCalling Cross Chain Manager Contrat This Branch is intended for developers who want to develop your own business logic contract which interacted with the cross chain manager provided by Poly Network. This part introduces the contracts involved in the cross chain process and the interfaces interacted with business logic contract. Business logic serves as smart contract invoked by users both on source chain and target chain. Cross Chain Manager contract offers two interfaces to interact with business logic contract directly. In additionally, an example of business logic is offered to help understand the interaction more vividly. Introduction Poly cross chain ecosystem provides a platform for various different chains to interact and transfer data along with carrying out cross chain transactions. Any chain can freely join the ecosystem. However, the chains that support smart contracts can interact and transfer all kinds of information between chains, while the chains that do not support smart contracts are limited to cross chain asset transfer. This part will introduce the contracts involved in the cross chain process and how they interact with each other. List of Contracts Block header synchronization contract: This contract maintains the record of block headers of the relay chain on this chain. These block headers serve as means to verify cross chain transactions. In the following context, it may be referred to as Header Sync Contract. Cross chain management contract: Every chain can have no more than one management contract. It creates the cross chain transactions that are transferred to the relay chain. All the service contracts that contain the business logic need to communicate with the management contract. In the following context, it may be referred to as CCM Contract. Service contract: It serves as business logic contract invoked by users both on source chain and target chain. This document offers an example of it, which is named as LockProxy Contract in the part Example. Cross Chain Interaction In general, in a full cross chain process, the user sends a cross chain request to the service contract on source chain by invoking a dApp's cross chain interface, and on the target chain the dApp's smart contract executes the necessary logic to produce the final result. source chain and target chain implement the two contracts (Header Sync Contract & CCM Contract) and other necessary interfaces, and anyone can develop an infrastructure for dApps around the CCM Contract. The contracts deployed on source chain and target chain make up a complete cross chain dApp. Interfaces To implement cross chain features for any chain, cross chain management contract is needed to be deployed. Every chain can have no more than one management contract. On source chain, it creates the cross chain transactions that are transferred to the Poly; On target chain, it verifies the legitimacy of transactions and executes the method on target business logic contract. All the business logic smart contract need to communicate with the management contract. Following are the detailed description of two interfaces which interacts with the business logic contracts. /* * @param toChainId The target chain id * @param toAddress The address in bytes format to receive same amount of tokens in target chain * @param toContract Target smart contract address in bytes in target block chain * @param txData Transaction data for target chain, include toAssetHash, toAddress, amount * @return true or false */ function crossChain(uint64 toChainId, bytes calldata toContract, bytes calldata method, bytes calldata txData) whenNotPaused external returns (bool) This method creates cross chain transactions, invoked by service contracts when a cross chain function is carried out in the logic contract. This method constructs the rawParam, which contains transaction hash, msg.sender, target chain id, business logic contract to be invoked on target chain, the target method to be invoked and the serialized transaction data which has been already constructed in business logic contract. Then put the hash of rawParam into storage, to help provide proof of transaction existence. /* * @param proof Poly chain transaction merkle proof * @param rawHeader The header containing crossStateRoot to verify the above tx merkle proof * @param headerProof The header merkle proof used to verify rawHeader * @param curRawHeader Any header in current epoch consensus of Poly chain * @param headerSig The coverted signature veriable for solidity derived from Poly chain consensus nodes' signature * used to verify the validity of curRawHeader * @return true or false */ function verifyHeaderAndExecuteTx(bytes memory proof, bytes memory rawHeader, bytes memory headerProof, bytes memory curRawHeader, bytes memory headerSig) whenNotPaused public returns (bool) This method is meant to be invoked by relayer, in some cases user could invoke this method by themselves if they get the valid block information from Poly. This method fetches and processes cross chain transactions, finds the merkle root of a transaction based on the block height (in the block header), verifies the legitimacy of transaction using the transaction parameters. After verifying Poly chain header and proof, it will invoke the service contract on the target chain. The detailed invoking will be processed as _executeCrossChainTx method as following: This method is meant to invoke the targeting contract, and trigger executation of cross chain tx on target chain. Firstly, we need to ensure the targeting contract gonna be invoked is indeed a contract rather than a normal account address. Then we construct a method call on target business logic contract, first we need to encodePacked the _method and the format of input data \"(bytes,bytes,uint64)\" , then keccak256 the encoded string, use bytes4 to take the first four bytes of the call data for a function call specifies the function to be called. Parameter _method is from the toMerkleValue , which is parsed from proof. And the input parameters format is restricted as (bytes _args, bytes _fromContractAddr, uint64 _fromChainId). These two parts are encodePacked as a call. After calling the method, we need to check that if the return value is true. Only if the return value is true, will the whole cross chain transaction be executed successfully. You may refer to the full code of EthCrossChainManager contract. Example This part provides an example of business logic contract, which provides a method to cross-chain transfer assets between two chains where already equipped with Cross-Chain Manager Contract and other required contracts mentioned before. In this example, the business logic contract is named as LockProxy contract. Authority Management: To ensure the security and integrity of the methods in contract, developers of business logic contracts need to manage the authority of invoking the methods. Here we provider a modifier which could modify the authority of these methods. // ethCCMProxyAddr: the address of cross chain manager proxy contract function setManagerProxy(address ethCCMProxyAddr) onlyOwner public { managerProxyContract = ethCCMProxyAddr; emit SetManagerProxyEvent(managerProxyContract); } modifier onlyManagerContract() { IEthCrossChainManagerProxy ieccmp = IEthCrossChainManagerProxy(managerProxyContract); require(_msgSender() == ieccmp.getEthCrossChainManager(), \"msgSender is not EthCrossChainManagerContract\"); _; } Setting the manager contract and binding assets/chains pair should be stricted to only the owner of LockProxy contract. Releasing the assets on target chain should also be stricted to only the cross chain manager contract. Bind assets: Besides of the verifying the existence of transaction through CCM contract, LockProxy contract needs to make sure of the accuracy of the assets relationship in the transaction. Therefore, the business contract should maintain the asset mapping and CCM proxy contract mapping. Asset mapping is from the asset on source chain to the mapping of target chain id to the same kind of asset issued on target chain. CCM contract mapping is from the target chain id to the LockProxy contract address on target chain. The asset mapping relationship which stored in LockProxy contract will help provide the completeness of transaction data. Bind actions also prevent the wrong input from users which may lead to transfer assets to wrong asset contract address. pragma solidity ^0.5.0; import \"./../../libs/ownership/Ownable.sol\"; contract LockProxy is Ownable { address public managerProxyContract; mapping(uint64 => bytes) public proxyHashMap; mapping(address => mapping(uint64 => bytes)) public assetHashMap; // toChainId: the target chain id // targetProxyHash: the address of lock proxy contract on target chain function bindProxyHash(uint64 toChainId, bytes memory targetProxyHash) onlyOwner public returns (bool) { proxyHashMap[toChainId] = targetProxyHash; emit BindProxyEvent(toChainId, targetProxyHash); return true; } // fromAssetHash: asset hash on source chain // toAssetHash: asset hash on target chain function bindAssetHash(address fromAssetHash, uint64 toChainId, bytes memory toAssetHash) onlyOwner public returns (bool) { assetHashMap[fromAssetHash][toChainId] = toAssetHash; emit BindAssetEvent(fromAssetHash, toChainId, toAssetHash, getBalanceFor(fromAssetHash)); return true; } } After setting the CCM proxy contract, the two mapping relationships should be input through bindProxyHash() and bindAssetHash(). Both on source chain and target chain, the user needs to bind the asset hash and LockProxy contract, so that the LockProxy contract can maintain mappings: From asset contract address on source chain and that on target chain with target chain id. From target chain id to LockProxy contract address on target chain After finishing setting all above, LockProxy contract will work properly as the business logic. Cross-Chain transaction: One cross chain transaction can be divided into two parts: on source chain, LockProxy contract will lock the asset to contract; on target chain, LockProxy contract will unlock the same amount to the target address. The whole process needs to convey the transaction data. The relationships between two chain's transaction data parameters shows below: /* * @param fromAssetHash The asset address in current chain * @param toChainId The target chain id * @param toAddress The address in bytes format to receive same amount of tokens in target chain * @param amount The amount of tokens to be crossed from ethereum to the chain with chainId */ function lock(address fromAssetHash, uint64 toChainId, bytes memory toAddress, uint256 amount) public payable returns (bool) { require(amount != 0, \"amount cannot be zero!\"); require(_transferToContract(fromAssetHash, amount), \"transfer asset from fromAddress to lock_proxy contract failed!\"); bytes memory toAssetHash = assetHashMap[fromAssetHash][toChainId]; require(toAssetHash.length != 0, \"empty illegal toAssetHash\"); TxArgs memory txArgs = TxArgs({ toAssetHash: toAssetHash, toAddress: toAddress, amount: amount }); bytes memory txData = _serializeTxArgs(txArgs); IEthCrossChainManagerProxy eccmp = IEthCrossChainManagerProxy(managerProxyContract); address eccmAddr = eccmp.getEthCrossChainManager(); IEthCrossChainManager eccm = IEthCrossChainManager(eccmAddr); bytes memory toProxyHash = proxyHashMap[toChainId]; require(toProxyHash.length != 0, \"empty illegal toProxyHash\"); require(eccm.crossChain(toChainId, toProxyHash, \"unlock\", txData), \"EthCrossChainManager crossChain executed error!\"); emit LockEvent(fromAssetHash, _msgSender(), toChainId, toAssetHash, toAddress, amount); return true; } This function is meant to be invoked by the user, a certain amount tokens will be locked immediately. Then the same amount of tokens will be unlocked from LockProxy contract on the target chain with chain id later; The user makes an asset token cross chain transaction request through the dApp which works in source chain, LockProxy contract gets the transation information which contains the asset contract address on source chain, the target chain id, the target address and amount of token to be transfered. By calling the function lock(), LockProxy contract will lock(transfer) the certain amount to asset contract; Then the transaction data will be packed, which then in turn invokes the CCM contract. The management contract transfers the parameters of transaction data to the target chain and a cross chain transaction is created by management contract which is sent to the target chain based on block generation on source chain; The serialized transaction data, along with the chain id and LockProxy contract address of target chain and the method needed to be called on target chain, will be sent through crossChain() in CCM contract. /* * @param argsBs The argument bytes recevied by the lock proxy contract on source chain, * need to be deserialized based on the way of serialization in the * lock proxy contract on source chain . * @param fromContractAddr The source chain contract address * @param fromChainId The source chain id */ function unlock(bytes memory argsBs, bytes memory fromContractAddr, uint64 fromChainId) onlyManagerContract public returns (bool) { TxArgs memory args = _deserializeTxArgs(argsBs); require(fromContractAddr.length != 0, \"from proxy contract address cannot be empty\"); require(Utils.equalStorage(proxyHashMap[fromChainId], fromContractAddr), \"From Proxy contract address error!\"); require(args.toAssetHash.length != 0, \"toAssetHash cannot be empty\"); address toAssetHash = Utils.bytesToAddress(args.toAssetHash); require(args.toAddress.length != 0, \"toAddress cannot be empty\"); address toAddress = Utils.bytesToAddress(args.toAddress); require(_transferFromContract(toAssetHash, toAddress, args.amount), \"transfer asset from lock_proxy contract to toAddress failed!\"); emit UnlockEvent(toAssetHash, toAddress, args.amount); return true; } This functions is meant to be invoked by Cross-Chain manager contract. It deserializes the transaction data and invokes the asset contract to release the tokens to target address. After verification through Poly (detailed verification process shown in part Cross Chain Interaction Between Chains), the packed transaction data could be executed on target chain. verifyHeaderAndExecuteTx() in Cross Chain Manager contract determines the legitimacy of the cross chain transaction information and resolve the parameters of transaction data from the Poly chain transaction merkle proof and crossStateRoot contained in the block header. Then call the function unlock() to deserialize the transaction data and unlock (transfer) the certain amount of token to the target address on target chain and completes the cross chain contract invocation. Serialize & deserialize transaction data function _serializeTxArgs(TxArgs memory args) internal pure returns (bytes memory) { bytes memory buff; buff = abi.encodePacked( ZeroCopySink.WriteVarBytes(args.toAssetHash), ZeroCopySink.WriteVarBytes(args.toAddress), ZeroCopySink.WriteUint255(args.amount) ); return buff; } function _deserializeTxArgs(bytes memory valueBs) internal pure returns (TxArgs memory) { TxArgs memory args; uint256 off = 0; (args.toAssetHash, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.toAddress, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.amount, off) = ZeroCopySource.NextUint255(valueBs, off); return args; } In the process of contract development, developers will always encounter serialization and deserialization problems, that is, how to save a struct type of data in the database and how to deserialize the byte array read from the database to obtain data of struct type. In the libs, ZeroCopySource.sol and ZeroCopySink.sol offered the interfaces to serialize and deserialize data. When serializing various data types, for fixed-length data (for example: bytes, uint16, uint32, uint64, etc.), directly convert the data into a byte array; for data with variable length, serializing the length is required firstly, and then serialize the data (for example, unsigned integers of unknown size, including uint16, uint32, or uint64, etc.). Deserialization is the opposite of serialization. For all serialization methods, there are corresponding deserialization methods. When reading data of a specified type, if you know its length, you can read it directly; for data with an unknown length, read the length first, and then read the content. You may refer to the full code of LockProxy contract . Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-18 15:52:36 "},"add_chain/registration.html":{"url":"add_chain/registration.html","title":"Chain Registration","keywords":"","body":"Chain RegistrationDevelopment Specifications for RegistrationChain Registration Registration is the basis for monitoring and processing block information and checking the execution of cross-chain transactions. After the registration process is complete and the Cross Chain Council approves the application, the chain officially becomes a part of the cross-chain ecosystem. [!NOTE] Registration and update are usually completed by application in a transaction using the trusted registered account by the poly team. Development Specifications for Registration Cross Chain Management Method Description RegisterSideChain Pack essential information and send it as an application to the poly chain. please refer to the code for more details. updateSideChain Pack updated essential information and send it as an application to the poly chain. please refer to the code for more details. The Key information for chain registration (submitted by .config): address of Cross-chain data contract Chain id assigned by poly team Router id assigned by poly team Chain name Number of confirmation blocks Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-18 15:41:45 "},"add_chain/blockdata_verification.html":{"url":"add_chain/blockdata_verification.html","title":"Block Data Verification","keywords":"","body":"Block Data VerificationLight Client VerificationCheck ListEssential Chain ElementsDevelopment SpecificationsBlock Header SynchronizationCross-Chain ManagementBlock Data Verification Light Client Verification Poly provides a solution based on block header synchronization like the Simple Payment Verification (SPV) protocol in Bitcoin and Light Ethereum Subprotocol (LES) in Ethereum Synchronize an initial block header of the side chain to the poly chain for initializing, and then synchronize all the subsequent blocks of the side chain to the poly chain. Verify the block header based on the critical blockchain data such as mining difficulties and signature with validator set. Verify cross-chain transaction using Merkle state root hash in block header and Merkle proof generated by source chain. Check List It is crucial to know whether a chain can join poly using Light Client Verification, and the block header must contain the following information： The hash of the previous block header Merkle state root hash The necessary information to prove the legitimacy of the block header varies from different consensus mechanisms. [!NOTE] Please get in touch with the poly team for more support if your chain doesn't support techniques like Simple Payment Verification (SPV) protocol in Bitcoin or Light Ethereum Subprotocol (LES) in Ethereum. Essential Chain Elements Some features and attributes need to be clarified for joining the cross-chain ecosystem. These features are the critical elements for implementing the interface method for handling block headers and cross-chain events. Consensus Algorithm The Consensus Algorithm determines how blockchains select consensus validators, voters, and block producers for minting new blocks and bookkeeping block transactions. Developers need to clearly understand the consensus protocol of the blockchain to get sufficient information for validating block headers. For instance, for blockchains that use POS, one of the essential elements for verifying blocks are signatures from validator nodes, which requires the developers Know the consensus nodes' election process, and who are the consensus nodes in the next epoch. Initial Block of the Chain The initial block, usually the canonical block, whose block header needs to be submitted to the relay chain of the cross-chain ecosystem to verify the consequent block headers and transactions. Block Header Structure and Verification Methods The block header verification and processing method together with block header format, the serialization, and the deserialization methods are necessary for implementing the interface method of header sync solution Merkle Tree Structure, Generation and Verification Methods The Merkle tree structure, generation, and verification methods for the ledger records or transactions are necessary to verify cross-chain transactions. Given the trusted block header, its application state root can help confirm the validity of transaction proof and obtain the actual cross-chain transaction message. By having a Merkle proof and the correct block header, we can prove that a particular transaction or event occurred on the chain with certainty. Development Specifications This chapter shows developers how to cooperate with the poly network team to add a chain into the poly cross-chain ecosystem. Mainly for Header Sync because the Consensus Vote hardly needs any additional targeted development.The methods that developers need to implement: Block Header Synchronization Method, including header sync functions and their corresponding entrance functions. Handler for handling the cross-chain transaction with Merkle proof. Block Header Synchronization To implement cross-chain features for any chain, say Ethereum, there are two kinds of contracts that need to be deployed- Block header synchronization contract: This contract maintains the record of block headers of the relay chain on this chain. These block headers serve as means to verify cross-chain transactions. The interface methods that need to be implemented by the respective contracts are as follows: Block Header Synchronization Method Method Description SyncGenesisHeader Synchronizes the side chain's genesis block header (or canonical block header that has sufficient information to verify subsequent block headers) to the relay chain. The method is called one time only when initializing the side chain. It stores and handles the initial block header so that the subsequent block headers of blocks that contain cross-chain events can be verified and synchronized; please refer to the code for more details. SyncBlockHeader Consistently synchronizes block cycle change and cross-chain transaction block headers from the side chain to the relay chain; the relayers use this interface method to synchronize block headers, stores, and process block headers, fetches the consensus node info if block generation cycle changes; please refer to the code for more details. Block Header Synchronization Entrance Method Method Description SyncSideChainGenesisHeader It is the entrance method for synchronizing the genesis block header of the side chain to poly chain and synchronizing the genesis header of the poly chain to ccm contract of the side chain; please refer to the code for more details. The Key information for this method(submitted by .config): Service provider(endpoint) Url of side chain Selected genesis block height Essential information for verifying genesis headers may exist in header information already or need to be fetched from block headers from other block height Information required for the side chain block header verification Cross-Chain Management Cross-chain management contract: Every chain can have no more than one management contract. It creates cross-chain transactions that are transferred to the relay chain. All the service contracts that contain the business logic need to communicate with the management contract. The interface methods that need to be implemented by the respective contracts are as follows: Cross Chain Management Method Description MakeDepositProposal Creates cross-chain transactions invoked by service contracts. When a cross-chain function is carried out in the logic, a transaction includes a unique chain ID; the transaction is recorded in the Merkle tree. Act as the entrance of verifyFromTx, verifying, storing, and returning MakeTxParam for processing cross-chain steps. Please refer to the code for details. MakeDepositProposal: Requires: service *native.NativeService //Native Service that carries values of information of cross-chain events Returns: type verifyFromTx struct { TxHash []byte CrossChainId []byte //ChainId of source chain FromContractAddress uint64 //Cross Chain Management Contarct address of source chain ToChainId string //ChainId of target chain ToContractAddress uint64 //Cross Chain Management Contarct address of target chain Method []byte //Unlock or lock Args []byte } Method Description verifyFromTx Prepare block header and deserialized proof for verifyMerkleProof, decode the extra data from tx and construct MakeTxParam. Please refer to the code for details. verifyFromTx: Requires: service *native.NativeService proof []byte //the proof to be serialized and verified extra []byte //the transaction information that will be used for constructing verifyFromTx fromChainID uint64, //ChainId of source chain height uint32, //the block height corresponding to current transaction event sideChain *side_chain_manager.SideChain //source chain information that contains ccm contract address Returns: txParam *scom.MakeTxParam Method Description verifyMerkleProof Verify the Merkle proof obtained by the relayer generated from the source chain to ensure that all transactions included in this block header have been created and have occurred on the relay chain. Please refer to the code for details. verifyMerkleProof: Requires: blockData *types.Header //the blockheader corresponding to current transaction event proof []byte //the serialized proof Returns: Val []byte //the proof result for checking extra before constructing verifyFromTx Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-18 15:38:50 "},"add_chain/relayer.html":{"url":"add_chain/relayer.html","title":"Relayer","keywords":"","body":"RelayerDevelopment Specifications for relayerChain ListenerChain SubmitterSubcommandsOther notesRelayer Development Specifications for relayer Poly relayer is the role to relay cross chains messages and interact with cross chain manager contracts. There are two components in the implementation: Chain Listener Chain listener is used to fetch data from the chain(as source chain), including fetch block headers, scan cross chain events emitted from cross chain manager contract, fetch merkle proofs if it's used to verify the cross chain message in the Poly chain. type IChainListener interface { // Initialize with config Init(*config.ListenerConfig, *poly.SDK) error // Blocks to confirm Defer() int // New block check interval ListenCheck() time.Duration // Chain Id ChainId() uint64 // Optional: Fetch block header and header hash, used to submit to poly chain for verifications Header(height uint64) (header []byte, hash []byte, err error) // Optional: Last header sync state in poly chain. LastHeaderSync(uint64, uint64) (uint64, error) // Scan cross chain transactions included in the block Scan(uint64) ([]*msg.Tx, error) // Compose cross chain message before submit to poly chain Compose(*msg.Tx) error // Current chain height LatestHeight() (uint64, error) } Chain Submitter Chain listener is used to submit messages/transactions to the chain, including submit bookkeeper changes of the poly chain, submit cross chain message to finalize as the last step. type IChainSubmitter interface { // Initialize with config Init(*config.SubmitterConfig) error // Submit message/transaction to the chain Submit(msg.Message) error // Start the thread Start(context.Context, *sync.WaitGroup, bus.TxBus, bus.DelayedTxBus, msg.PolyComposer) error // Process the cross chain message from poly chain ProcessTx(*msg.Tx, msg.PolyComposer) error } The poly-relayer project depends on the bridge-common library. When registering a new chain, below steps can be followed. Add chain ID in the bridge-common project. Add chain client SDK here for common usage. Add chain wallet SDK here for common usage. Implement interface IChainListener and IChainSubmitter for the new chain. Register ChainListener and ChainSubmitter in selectors located in the relayer.go file. Subcommands settxblock can set the scan scan start height. setheaderblock can set the header sync height. status shows the current relayer status. Other notes Deployment guide, please follow here. Wallet balance should be checked regularly to avoid out of fee balance issue. Mulitple wallet accounts can be created to increase message relay througout. Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-18 15:18:42 "},"FAQ/template.html":{"url":"FAQ/template.html","title":"Integrating New Tokens","keywords":"","body":"Joining the Cross Chain EcosystemOverviewInterface RequirementsBlock Header Synchronization ContractCross Chain Management ContractCross Chain Interaction Between ChainsChain Elements to be Submitted to the Cross Chain EcosystemRegister the Chain on Relay ChainJoining the Cross Chain Ecosystem Overview Poly cross chain ecosystem provides a platform for various different chains to interact and transfer data along with carrying out cross chain transactions. Any chain can freely join the ecosystem. However, the chains that support smart contracts can interact and transfer all kinds of information between chains, while the chains that do not support smart contracts are limited to cross chain asset transfer. There are three factors that determine whether a blockchain can join the Poly cross chain ecosystem: The system implements multiple interfaces either using smart contracts, or as core API that can be used to interact with the chain The chain needs to provide its block header format, the serialization and deserialization methods used, and the mode of signature verification in order to allow the relay chain to be able to process and verify block headers. The chain also needs to provide its merkle tree generation and verification method for the ledger records or transactions. This allows the relay chain to determine the legitimacy of the transaction records. Interface Requirements To implement cross chain features for any chain, say Ethereum, there are two kinds of contracts that need to be deployed- Block header synchronization contract: This contract maintains the record of block headers of the relay chain on this chain. These block headers serve as means to verify cross chain transactions. Cross chain management contract: Every chain can have no more than one management contract. It creates the cross chain transactions that are transferred to the relay chain. All the service contracts that contain the business logic need to communicate with the management contract. The interface methods that need to implemented by the respective contracts are as follows: Block Header Synchronization Contract Interface Method Description SyncGenesisHeader Synchronizes the relay chain's genesis block header (or another block header where a change in block generation cycle occurred), method is invoked one time only when the contract is initialized, stores and processes the genesis block header, fetches the consensus node info of the relay chain, please refer to the code for more details SyncBlockHeader Consistently synchronizes block cycle change and cross chain transaction block headers from the relay chain, relayer uses this interface method to synchronize block headers, stores and processes block headers, fetches the consensus node info if block generation cycle changes, please refer to the code for more details Cross Chain Management Contract Interface Method Description CreateCrossChainTx Creates cross chain transactions, invoked by service contracts when a cross chain function is carried out in the logic, transaction includes unique chain ID, transaction is recorded in the merkle tree, please refer to the code for more details ProcessCrossChainTx Fetches and processes cross chain transactions, invoked by the relayer when fetching transactions and merkle proofs, finds the merkle root of a transaction based on the block height (in the block header), verifies the legitimacy of transaction using the transaction parameters, invokes the service contract on the target chain, please refer to the code for details Cross Chain Interaction Between Chains The figure above illustrates the cross chain interaction between chain A to chain B. The user sends a cross chain request from chain A by invoking a dApp's cross chain interface, and on the target chain B the dApp's smart contract executes the necessary logic to produce the final result. Chain A and B implement the two contracts and other necessary interfaces, and anyone can develop an infrastructure for dApps around the cross chain management contract. The contracts deployed on chain A and chain B make up a complete cross chain dApp. The complete process flow from chain A to chain B is as follows: The user invokes the service contract on chain A, which then in turn invokes the cross chain management contract. The management contract transfers the parameters to the target chain and a cross chain transaction is created by management contract which is sent to the target chain based on block generation on chain A; Since there is no means of automatic data exchange between two chains, a relayer needs to be set up to transfer block header details from chain A to the relay chain's block header synchronization contract. It also fetches the management contract's response event from chain A which encapsulates the parameters passed by the user, and also fetches the merkle proof. Next, it groups this information together and sends it to the cross chain management contract. The management contract fetches the block headers from chain A, verifies whether or not the cross chain parameters and the proof are valid, and then transmits the necessary information to chain B in the form of an event; Chain B's relayer transfers the relay chain's block headers to chain B's block header synchronization contract. The relevant chain B cross chain transaction parameters and respective merkle proofs are fetched from the ledger records of the relay chain and transmitted to chain B's cross chain management contract; The management contract of chain B determines the legitimacy of the cross chain transaction information and then invokes the relevant target contract and completes the cross chain contract invocation; There are two different merkle proofs that are transferred to the relay chain: The merkle proof that is used to verify the legitimacy of cross chain transactions from chain A The merkle proof that is used to ensure that a transaction has been created and has occurred on the relay chain These merkle proofs help establish a trust mechanism for the cross chain ecosystem. Any chain can join the cross chain ecosystem by setting up the communication interface with the relay chain. Chain Elements to be Submitted to the Cross Chain Ecosystem Genesis Block of the Chain The genesis block's block header needs to be submitted to the consortium chain of the cross chain ecosystem so as to allow to it verify the consequent transactions and block headers on this chain. Another high-priority block such as block where the block generation cycle changes can also be submitted in place of the genesis block. Verification and Analysis Method, Block Header Structure The block header verification and processing method along with the block structure needs to be submitted so that the relay chain can verify the block headers that will be transferred from this chain. Merkle Tree Structure and Verification Method The merkle tree structure and the respective verification needs to be submitted to the relay chain such that cross chain transactions from this chain can be verified. Register the Chain on Relay Chain After setting up the necessary cross chain infrastructure, the chain can be registered on the relay chain. The registration API used is as follows: type RegisterSideChainParam struct { Address string ChainId uint64 Router uint64 Name string BlocksToWait uint64 CCMCAddress []byte } Parameter Description Address The wallet address that will be associated to this chain and will be authorized to modify the registration information ChainId Chain ID of this chain Router The routing protocol of the chain, existing routing protocols - 1:BTC, 2:ETH, 3:ONT, isomorphic chains can select existing protocol, rest must first define the respective protocol and then select Name Name of the blockchain network BlocksToWait No. of blocks to wait for in order to confirm finality CCMCAddress Cross Chain Management Contract Address of this chain As the cross chain ecosystem grows with time and more and more chains join in, different routing protocols will become a part of the system and isomorphic chains will directly be able to use the appropriate routing protocol. After the registration process is complete and the Cross Chain Council approves the application, the chain officially becomes a part of the cross chain ecosystem. Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2021-12-14 15:50:48 "},"GLOSSARY.html":{"url":"GLOSSARY.html","title":"Glossary","keywords":"","body":"RelayerSide ChainSource ChainTarget ChainPoly ChainCanonical BlockCross Chain CouncilRelayer A cross-chain information porter performs some of the most critical operations within the cross-chain. It acts as the medium of interaction between the side chain and the outside world. Each chain in the cross-chain ecosystem has a relayer associated with it. Relayer monitors its corresponding chain network for cross-chain transactions and forwards the respective block headers to the relay chain if detected, gaining available incentives in the process. At the same time, it also monitors for cross-chain transactions taking place on the relay chain and transfers them to the respective side chain. Side Chain A chain that is interested in joining the poly cross-chain ecosystem Source Chain A public chain corresponds to the target chain where a particular asset firstly appears. Target Chain A public chain corresponds to the source chain on which we want to cross an asset and issue a new token. For the ether asset, Ethereum is the source chain. When we want to issue a new OEP4 token in The Ontology network represents the ether, and the Ontology chain will be the target chain for the ether asset. Vice versa, For the ONT token, the Ontology chain is the source chain. When we want to issue a new ERC20 token in the Ethereum chain, Ethereum would be the target chain for the Ont network. Poly Chain The Relay chain in the cross-chain ecosystem. One of the crucial components of the cross-chain ecosystem. Each type of node is deployed and maintained by other individuals or organizations and has its unique governance and trust mechanism. The relay chain is responsible for connecting them, standardizing cross-chain data flow and interfaces, verifying the legitimacy of cross-chain data, etc. Canonical Block A block is included in the primary blockchain and is directly or indirectly referenced by future blocks. Blocks that are not canonical may have been valid but were discarded in favor of the canonical block. Cross Chain Council A Council formed by poly consensus nodes. Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-06 10:07:58 "}}